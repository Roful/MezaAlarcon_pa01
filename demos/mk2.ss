
;;; This file was generated by writeminikanren.pl
;;; Generated at 2007-10-25 15:24:42

(define *debug-tags* '())
(define debug
  (lambda (tags format . args)
    (let* ((tags (if (not (pair? tags)) (list tags) tags))
           (fs (string-append "[" (symbol->string (car tags)) "] " format "\n")))
      (cond
       [(null? tags)]
       [(pair? tags)
        (if (member (car tags) *debug-tags*)
            (apply printf fs args)
            (void))]
       ))))


;; Stream primitives
(define-syntax lambdag@
  (syntax-rules ()
    ((_ (p ...) e ...) (lambda (p ...) e ...))))

(define-syntax lambdaf@
  (syntax-rules ()
    ((_ () e ...) (lambda () e ...))))

(define-syntax inc
  (syntax-rules () ((_ e) (lambdaf@ () e))))

(define defunc
  (lambda (f)
    (if (procedure? f) (defunc (f)) f)))

(define snull 'snull)

(define snull? 
  (lambda (s)
    (eq? s snull)))

(define-syntax scons
  (syntax-rules ()
    ((_ a d) (cons a (lambda () d)))))

(define scar
  (lambda (s)
    (cond
     [(procedure? s) (scar (s))]
     [else (car s)])))

(define scdr
  (lambda (s)
    (cond
     [(procedure? s) (scdr (s))]
     [else ((cdr s))])))

(define-syntax sunit
  (syntax-rules ()
    ((_ a) (scons a snull))))

(define slift
  (lambda (f)
    (lambda args
      (sunit (apply f args)))))

(define-syntax make-stream
  (syntax-rules ()
    ((_) snull)
    ((_ e1 e2 ...) (scons e1 (make-stream e2 ...)))))

(define take
  (lambda (n s)
    (if (and n (zero? n))
        '()
        (let ([s (defunc s)])
          (cond
           [(snull? s) '()]
           [else (cons (scar s) (take (and n (- n 1)) (scdr s)))])))))

(define smerge
  (lambda (s1 s2)
    (cond
     [(snull? s1) s2]
     [(procedure? s1)
      (lambda () (smerge s2 (s1)))]
     [else (scons (scar s1) (smerge s2 (scdr s1)))])))

(define stream-merge
  (lambda (ss)
    (cond
     [(snull? ss) snull]
     [(procedure? ss) (lambda () (stream-merge (ss)))]
     [(snull? (scar ss)) (stream-merge (scdr ss))]
     [(procedure? (scar ss)) (lambda () 
                               (smerge (stream-merge (scdr ss))
                                       (scar ss)))]
     [else (scons (scar (scar ss)) (smerge (scdr (scar ss))
                                           (stream-merge (scdr ss))))])))

(define smap
  (lambda (f s)
    (cond
     [(snull? s) snull]
     [(procedure? s) (lambda () (smap f (s)))]
     [else (scons (f (scar s)) (smap f (scdr s)))])))



;; Substitution
(define-syntax rhs
  (syntax-rules ()
    ((_ x) (cdr x))))

(define-syntax lhs
  (syntax-rules ()
    ((_ x) (car x))))

(define-syntax size-s
  (syntax-rules ()
    ((_ x) (length x))))

(define-syntax var
  (syntax-rules ()
    ((_ x) (vector x))))

(define-syntax var?
  (syntax-rules ()
    ((_ x) (vector? x))))

(define empty-s '())

(define walk
  (lambda (v s)
    (cond
      ((var? v)
       (let ((a (assq v s)))
         (cond
           (a (walk (rhs a) s))